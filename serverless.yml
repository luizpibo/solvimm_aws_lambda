#nome do serviço
service: instagrao
#versao do framework
frameworkVersion: "3"

#configuração do provedor
provider:
  #nome do provedor
  name: aws
  #linguagem e versão
  runtime: nodejs14.x
  #região que o serviço será hospedado
  region: sa-east-1
  #estágio de desenvolvimento
  stage: dev
  #variáveis de ambiente
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  #permições
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

#funções
functions:
  #evento que quando disparado extrai os metadados da image
  # (dimensões(altura, largura) e tamanho do arquivo)
  # e armazena esses dados no DynamoDB na tabela que o nome está contido nas variavéis de ambiente
  extractMetadata:
    #diretório da função
    handler: handler.extractMetadata
    #quantidade de memória alocada para a operação
    memorySize: 128
    #tempo limite de execução
    timeout: 30
    #lista de eventos que disparam essa função
    events:
      #serviço S3
      - s3:
          #Nome do bucket que será criado caso não exista
          #caso ja exista o bucket deveremos ativar a função abaixo
          #existing: true
          bucket: pictures-intagrao
          #evento que desejamos ouvir
          event: s3:ObjectCreated:*
  #Endpoint que espera receber um s3objectkey referente
  # a imagem salva no bucket de imagens e retorna os metadados dessa imagem
  getImageMetadata:
    handler: handler.getImageMetadata
    memorySize: 128
    timeout: 30
    events:
      #requisição http
      - http:
          #rota e declaração de atributos que desejamos receber
          path: images/metadata/{s3objectkey}
          #metodo http
          method: get
          #cors
          cors: true
  #Endpoint que espera receber um s3objectkey e retorna uma imagem
  getImage:
    handler: handler.getImage
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: images/download/{s3objectkey}
          method: get
          cors: true
  #Não recebe parametros e retorna a tabela que contem:
  # - Qual imagem contém o maior tamanho
  # - Qual imagem contém o menor tamanho
  # - Quais os tipos de imagem salvas no S3
  # - Qual a quantidade de cada tipo de imagem salva
  infoImages:
    handler: handler.infoImages
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: info/images/
          method: get
          cors: true

#recursos
resources:
  Resources:
    #nome do recurso
    ImagesDynamoDbTable:
      #tipo do recurso
      Type: "AWS::DynamoDB::Table"
      #propriedades do recurso
      Properties:
        #nome da tabela que será criada no dynamoDB
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        #lista de definição dos campos que serão criados na tabela
        AttributeDefinitions:
          #nome do atributo
          - AttributeName: s3objectkey
            #tipo do atributo
            AttributeType: S
        #esquema de chave
        KeySchema:
          - AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-offline
  - serverless-plugin-typescript
