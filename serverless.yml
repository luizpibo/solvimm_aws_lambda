#nome do serviço
service: instagrao
#versao do framework
frameworkVersion: "3"

#configuração do provedor
provider:
  #nome do provedor
  name: aws
  apiName: ${self:service}
  memorySize: 128 #mb
  timeout: 30 #seconds
  #linguagem e versão
  runtime: nodejs14.x
  #região que o serviço será hospedado
  region: sa-east-1
  #estágio de desenvolvimento
  stage: dev
  #variáveis de ambiente
  environment:
    DYNAMODB_TABLE: ${self:custom.tableName}
    BUCKET_NAME: ${self:custom.bucketName}
    REGION: ${self:provider.region}

custom:
  bucketName: ${self:service}-s3-file-bucket-${self:provider.stage}
  bucketRolePath: arn:aws:s3:::${self:custom.bucketName}/*
  tableName: ${self:service}-${opt:stage, self:provider.stage}
  tableRolePath: arn:aws:dynamodb:sa-east-1:972264571463:table/instagrao-dev

#funções
functions:
  #evento que quando disparado extrai os metadados da image
  # (dimensões(altura, largura) e tamanho do arquivo)
  # e armazena esses dados no DynamoDB na tabela que o nome está contido nas variavéis de ambiente
  extractMetadata:
    #diretório da função
    handler: handler.extractMetadata
    #lista de eventos que disparam essa função
    events:
      #serviço S3
      - s3:
          #Nome do bucket que será criado caso não exista
          bucket: ${self:custom.bucketName}
          #evento que desejamos ouvir
          event: s3:ObjectCreated:*
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: ${self:custom.tableRolePath}
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: ${self:custom.bucketRolePath}

  #Endpoint que espera receber um s3objectkey referente
  # a imagem salva no bucket de imagens e retorna os metadados dessa imagem
  getImageMetadata:
    handler: handler.getImageMetadata
    events:
      #requisição http
      - http:
          #rota e declaração de atributos que desejamos receber
          path: image/metadata/{s3objectkey}
          #metodo http
          method: GET
          #cors
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:GetItem"
        Resource: ${self:custom.tableRolePath}

  #Endpoint que espera receber um s3objectkey e retorna uma imagem
  getImage:
    handler: handler.getImage
    events:
      - http:
          path: image/download/{s3objectkey}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:Get*"
        Resource: ${self:custom.bucketRolePath}

  #Não recebe parametros e retorna a tabela que contem:
  # - Qual imagem contém o maior tamanho
  # - Qual imagem contém o menor tamanho
  # - Quais os tipos de imagem salvas no S3
  # - Qual a quantidade de cada tipo de imagem salva
  getInfoImages:
    handler: handler.getInfoImages
    events:
      - http:
          path: info/images/
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:GetItem"
        Resource: ${self:custom.tableRolePath}

#recursos
resources:
  Resources:
    #nome do recurso
    ImagesDynamoDbTable:
      #tipo do recurso
      Type: "AWS::DynamoDB::Table"
      #propriedades do recurso
      Properties:
        #nome da tabela que será criada no dynamoDB
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        #lista de definição dos campos que serão criados na tabela
        AttributeDefinitions:
          #nome do atributo
          - AttributeName: s3objectkey
            #tipo do atributo
            AttributeType: S
        #esquema de chave
        KeySchema:
          - AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
